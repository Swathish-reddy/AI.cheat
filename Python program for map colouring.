def is_safe(node, color, graph, colors_assigned):
    for neighbor in graph[node]:
        if colors_assigned.get(neighbor) == color:
            return False
    return True

def backtrack_coloring(node, graph, colors, colors_assigned):
    if node == len(graph):
        return True  # All nodes assigned
    
    for color in colors:
        if is_safe(node, color, graph, colors_assigned):
            colors_assigned[node] = color
            if backtrack_coloring(node + 1, graph, colors, colors_assigned):
                return True
            # Backtrack
            del colors_assigned[node]
    return False

def map_coloring(graph, colors):
    colors_assigned = {}
    if backtrack_coloring(0, graph, colors, colors_assigned):
        return colors_assigned
    else:
        return None

# Graph as adjacency list, nodes indexed 0..N-1
# Example: a map of 4 regions with edges between them
graph = {
    0: [1, 2],  # Region 0 adjacent to 1 and 2
    1: [0, 2, 3],
    2: [0, 1, 3],
    3: [1, 2]
}

colors = ['Red', 'Green', 'Blue']

solution = map_coloring(graph, colors)

if solution:
    for region in sorted(solution):
        print(f"Region {region} -> {solution[region]}")
else:
    print("No solution found with given colors.")
