from collections import deque

# Each state: (missionaries_left, cannibals_left, boat_side)
# boat_side = 0 for left side, 1 for right side
def is_valid(state):
    m_left, c_left, _ = state
    m_right = 3 - m_left
    c_right = 3 - c_left

    # Check non-negative and limits
    if not (0 <= m_left <= 3 and 0 <= c_left <= 3):
        return False
    if not (0 <= m_right <= 3 and 0 <= c_right <= 3):
        return False

    # Missionaries can't be outnumbered by cannibals on either side
    if (m_left > 0 and m_left < c_left) or (m_right > 0 and m_right < c_right):
        return False

    return True

def get_successors(state):
    m, c, boat = state
    moves = [(1, 0), (2, 0), (0, 1), (0, 2), (1, 1)]
    successors = []

    for dm, dc in moves:
        if boat == 0:  # Boat on left
            new_state = (m - dm, c - dc, 1)
        else:  # Boat on right
            new_state = (m + dm, c + dc, 0)

        if is_valid(new_state):
            successors.append(new_state)

    return successors

def bfs():
    start = (3, 3, 0)  # All on left
    goal = (0, 0, 1)   # All on right
    queue = deque([(start, [start])])
    visited = set()

    while queue:
        state, path = queue.popleft()
        if state in visited:
            continue
        visited.add(state)

        if state == goal:
            return path

        for next_state in get_successors(state):
            queue.append((next_state, path + [next_state]))

    return None

def print_solution(path):
    for i, state in enumerate(path):
        m, c, b = state
        boat = "Left" if b == 0 else "Right"
        print(f"Step {i}: M={m}, C={c}, Boat={boat}")
    print("\nMissionaries and Cannibals problem solved!")

# Run the solver
solution = bfs()
if solution:
    print_solution(solution)
else:
    print("No solution found.")
