import heapq

# Goal state
goal_state = [[1, 2, 3],
              [4, 5, 6],
              [7, 8, 0]]

# Get the position of a tile in the goal state
def get_position(value):
    for i in range(3):
        for j in range(3):
            if goal_state[i][j] == value:
                return (i, j)

# Manhattan distance heuristic
def manhattan_distance(state):
    distance = 0
    for i in range(3):
        for j in range(3):
            value = state[i][j]
            if value != 0:
                goal_i, goal_j = get_position(value)
                distance += abs(i - goal_i) + abs(j - goal_j)
    return distance

# Generate next possible states
def get_neighbors(state):
    neighbors = []
    directions = [(-1,0), (1,0), (0,-1), (0,1)]  # up, down, left, right

    # Find the blank (0)
    for i in range(3):
        for j in range(3):
            if state[i][j] == 0:
                x, y = i, j
                break

    for dx, dy in directions:
        new_x, new_y = x + dx, y + dy
        if 0 <= new_x < 3 and 0 <= new_y < 3:
            new_state = [row[:] for row in state]
            # Swap
            new_state[x][y], new_state[new_x][new_y] = new_state[new_x][new_y], new_state[x][y]
            neighbors.append(new_state)
    return neighbors

# A* Search Algorithm
def a_star(start_state):
    visited = set()
    priority_queue = []
    heapq.heappush(priority_queue, (manhattan_distance(start_state), 0, start_state, []))  # (f, g, state, path)

    while priority_queue:
        f, g, current, path = heapq.heappop(priority_queue)
        serialized = str(current)

        if serialized in visited:
            continue

        visited.add(serialized)

        if current == goal_state:
            return path + [current]

        for neighbor in get_neighbors(current):
            if str(neighbor) not in visited:
                heapq.heappush(priority_queue, (
                    g + 1 + manhattan_distance(neighbor),
                    g + 1,
                    neighbor,
                    path + [current]
                ))
    return None

# Helper function to print the puzzle
def print_puzzle(state):
    for row in state:
        print(" ".join(str(num) if num != 0 else ' ' for num in row))
    print()

# Example: Initial state
initial_state = [[1, 2, 3],
                 [4, 0, 6],
                 [7, 5, 8]]

solution = a_star(initial_state)

if solution:
    print("Solution found in {} steps:\n".format(len(solution) - 1))
    for step in solution:
        print_puzzle(step)
else:
    print("No solution found.")
