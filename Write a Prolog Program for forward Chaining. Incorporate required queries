% Define facts and rules
fact(has_fur, dog).
fact(has_tail, dog).
fact(has_fur, cat).
fact(has_tail, cat).
fact(has_feathers, bird).
rule(mammal, X) :-
    fact(has_fur, X),
    fact(has_tail, X).
rule(animals, X) :-
    fact(has_fur, X).
rule(animals, X) :-
    fact(has_feathers, X).

% Derived facts
derived([]).

% Implement forward chaining
forward_chaining :- 
    derived(Derived),
    rule(Consequent, X),
    \+ member(Consequent, Derived), % Check if already derived
    \+ fact(Consequent, X), % Check if not already known as a fact
    (   check_conditions(X, Consequent) ->
        write('Derived: '), write(Consequent), write(' for '), write(X), nl,
        asserta(fact(Consequent, X)),
        append([Consequent], Derived, NewDerived),
        retract(derived(Derived)),
        asserta(derived(NewDerived))
    ;   true
    ),
    forward_chaining. % Continue the process

% Check if all conditions of a rule are satisfied
check_conditions(X, X). % Base case
check_conditions(X, Condition) :-
    rule(Condition, X),
    fact(Condition, X),
    check_conditions(X, Consequent).

% Example queries
?- forward_chaining.

\\\\\\\\\\

% Knowledge base: facts and rules

% Initial facts
fact(sunny).
fact(warm).

% Rules in the form:
% rule(Head, [BodyConditions])
rule(beach_day, [sunny, warm]).
rule(stay_home, [rainy]).
rule(take_umbrella, [rainy, cloudy]).

% Dynamic predicate to store inferred facts
:- dynamic known/1.

% Initialize known facts from fact/1
initialize :-
    retractall(known(_)),
    forall(fact(F), assertz(known(F))).

% Forward chaining loop
forward_chaining :-
    initialize,
    infer_new_facts,
    write('Known facts after inference:'), nl,
    forall(known(F), (write('- '), write(F), nl)).

% Infer new facts by applying rules whose bodies are satisfied but head not yet known
infer_new_facts :-
    % Find a rule that can be applied
    rule(Head, Body),
    \+ known(Head),             % Head not known yet
    all_known(Body),            % All conditions in body are known
    assertz(known(Head)),       % Add Head to known facts
    !,                         % Cut to re-start after adding fact
    infer_new_facts.
infer_new_facts.               % No more facts to infer

% Check if all facts in list are known
all_known([]).
all_known([H|T]) :-
    known(H),
    all_known(T).


\\\\\\\

?- forward_chaining.
