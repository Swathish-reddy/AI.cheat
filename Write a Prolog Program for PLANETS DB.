% Database of planets with names, types, and distances from the sun
planet(mercury, rocky, 0.39).
planet(venus, rocky, 0.72).
planet(earth, rocky, 1.00).
planet(mars, rocky, 1.52).
planet(jupiter, gas_giant, 5.20).
planet(saturn, gas_giant, 9.58).
planet(uranus, gas_giant, 19.22).
planet(neptune, gas_giant, 30.05).

% Predicate to query planets of a specific type
planets_of_type(Type, Planets) :-
    findall(Name, planet(Name, Type, _), Planets).

% Predicate to query planets within a specific distance range
planets_within_distance(Min, Max, Planets) :-
    findall(Name, (planet(Name, _, Distance), Distance >= Min, Distance <= Max), Planets).

OUTPUT:
```prolog
?- planets_of_type(rocky, RockyPlanets).
RockyPlanets = [mercury, venus, earth, mars].

?- planets_within_distance(5, 20, NearbyPlanets).
NearbyPlanets = [jupiter, saturn, uranus].
\\\\\\\\\
% planet(Name, OrderFromSun, Type, HasRings).
% Type can be terrestrial or gas_giant or ice_giant

planet(mercury, 1, terrestrial, no).
planet(venus, 2, terrestrial, no).
planet(earth, 3, terrestrial, no).
planet(mars, 4, terrestrial, no).
planet(jupiter, 5, gas_giant, yes).
planet(saturn, 6, gas_giant, yes).
planet(uranus, 7, ice_giant, yes).
planet(neptune, 8, ice_giant, yes).

% Query examples:

% Find the type of a planet
planet_type(Name, Type) :-
    planet(Name, _, Type, _).

% Find planets with rings
planets_with_rings(Name) :-
    planet(Name, _, _, yes).

% Find the order of a planet from the sun
planet_order(Name, Order) :-
    planet(Name, Order, _, _).
\\\\\\\
?- planet_type(earth, Type).
Type = terrestrial.

?- planets_with_rings(Planet).
Planet = jupiter ;
Planet = saturn ;
Planet = uranus ;
Planet = neptune.

?- planet_order(mars, Order).
Order = 4.
