% Define facts and rules
fact(has_fur, dog).
fact(has_tail, dog).
fact(has_fur, cat).
fact(has_tail, cat).
fact(has_feathers, bird).
rule(mammal, X) :-
    fact(has_fur, X),
    fact(has_tail, X).
rule(animals, X) :-
    fact(has_fur, X).
rule(animals, X) :-
    fact(has_feathers, X).

% Predicate to check if a goal can be entailed from the knowledge base
entails(Goal, _) :- fact(Goal, _).
entails(Goal, Derived) :-
    rule(Consequent, Goal),
    \+ member(Consequent, Derived), % Check if not already derived
    entails(Consequent, [Goal | Derived]).

% Predicate to use backward chaining to prove a goal
prove(Goal) :-
    entails(Goal, []),
    write('Goal '), write(Goal), write(' is proved.'), nl.

prove(Goal) :-
    \+ entails(Goal, []),
    write('Goal '), write(Goal), write(' cannot be proved.'), nl.

% Example queries
?- prove(mammal, dog).
?- prove(animals, dog).
?- prove(mammal, bird).

\\\\\\\\\\\\

% Facts
fact(sunny).
fact(warm).
fact(rainy).
fact(cloudy).

% Rules (rule(Head, BodyList))
rule(beach_day, [sunny, warm]).
rule(stay_home, [rainy]).
rule(take_umbrella, [rainy, cloudy]).

% Backward chaining predicate to prove a goal
prove(Goal) :-
    fact(Goal).         % Goal is a known fact

prove(Goal) :-
    rule(Goal, Body),   % Goal can be proved if Body conditions are true
    prove_all(Body).

% Prove all goals in the list
prove_all([]).
prove_all([H|T]) :-
    prove(H),
    prove_all(T).

\\\\

?- prove(beach_day).
true.

?- prove(take_umbrella).
true.

?- prove(stay_home).
true.

?- prove(snowy_day).
false.
